<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on All Time NEET</title>
    <link>https://alltimeneet.com/tags/hugo/</link>
    <description>Recent content in Hugo on All Time NEET</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Feb 2019 22:03:25 +0900</lastBuildDate>
    
	<atom:link href="https://alltimeneet.com/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CircleCIで毎回面倒なHugoのデプロイ作業を自動化する</title>
      <link>https://alltimeneet.com/tech/circleci-hugo/</link>
      <pubDate>Tue, 12 Feb 2019 22:03:25 +0900</pubDate>
      
      <guid>https://alltimeneet.com/tech/circleci-hugo/</guid>
      <description>CIサービスとは  ビルドとテストを自動化するためのサービス
 ということで理解しておけばいいと思います。一応直訳すると「Continuous Integration（継続的インテグレーションサービス）」、略してCIサービスということらしいです。
参考: なぜCIが必要なのか
目標  GithubPagesで公開しているHugoプロジェクトのデプロイ作業を自動化する
 Hugoの場合はプロジェクト本体ではなく、publicディレクトリ以下をgithubにホスティングする必要があるので、デプロイするときは基本的に以下のような手順を踏まなければならない。
$ git commit -m &amp;#34;hoge&amp;#34; $ hugo #public以下にサイトを生成するコマンド $ cd public $ git commit -m &amp;#34;hogehoge&amp;#34; $ git push このルーティンが段々だるくなってくきたので、CircleCiでこれを自動化する。
手順  レポジトリとデプロイキーを登録する .circleci/config.ymlの記述  参考: CircleCIでHugoを実行してGitHub Pagesにデプロイ
ブログ(HUGO)のビルドとデプロイをCircleCIで自動化した
1. レポジトリとデプロイキーを登録する  レポジトリの登録
最初のブランチ一覧が表示される画面で登録したいレポジトリにチェックマークをつけてFollowを押せば登録できます。 デプロイキーの登録
今回はgithubへのsshキーを登録します。サイドメニューのcheck out SSH Key からadd User KeyでGithubアカウントにログインすること楽に登録ができます。手動で登録も可能ですが、pushのための書き込み権限の付与がされてなくてエラーになりました、何やかんややりましたが解決できなかったので、check out ssh keyからの登録をお勧めします。  2. .circleci/config.ymlの記述 CircleCiにやってほしいことを.circleci/config.ymlに記述します。githubのレポジトリにpushされた時発火します。 僕の場合masterブランチでhugoプロジェクト本体、gh-pagesブランチで公開用のpublic以下のファイル群を管理しています。内容はこんな感じです参考までに
version: 2 jobs: build: docker: - image: cibuilds/hugo:latest environment: TZ: Asia/Tokyo #ここら辺はコピペでいいと思う branches: ignore: - gh-pages #gh-pagesにプッシュされた際に反応しないようにignoreを設定している steps: - checkout - run: name: &amp;#34;Setting for Git&amp;#34; command: | git config --global user.</description>
    </item>
    
    <item>
      <title>ブログをJekyllからHugoへ移行した</title>
      <link>https://alltimeneet.com/tech/hugo-import-jekyll/</link>
      <pubDate>Tue, 12 Feb 2019 22:01:43 +0900</pubDate>
      
      <guid>https://alltimeneet.com/tech/hugo-import-jekyll/</guid>
      <description>データをJekyllからインポート なんとHugoがコマンドを用意してくれています。一発で綺麗に引越し完了！とはなりませんが、楽チン。
$ hugo imoprt jekyll path_to_jekyll_root_project path_to_hugo_root_project 日付のデータは、移行できないようです。なぜか記事ファイルのメタデータが無視されていたので、手動でコピーし直しました。 終了すると、Hugoから
$ git clone https://github.com/spf13/herring-cove.git HOGEHOGE/themes/herring-cove $ hugo server --theme=herring-cove 「このコマンド打ってな〜」と言われると思いますが、なんとその通りにやってもうまくいきません！笑 git cloneしたherring-coveテーマが原因です。おそらくアプデされていないのでしょう。以下のように直します。変更箇所は複数のファイルで存在するので、エディタの機能使うなどして一括変換するといいと思います。
 {{ template &amp;ldquo;theme/herring-cove/footer.html&amp;rdquo; . }} を {{ partial &amp;ldquo;footer.html&amp;rdquo; }}に {{ template &amp;ldquo;theme/herring-cove/header.html&amp;rdquo; . }} を {{ partial &amp;ldquo;header.html&amp;rdquo; }}に  これで再度hugo serverすると動いてくれるかなと思います。正常に動くのを確認したら、あとは適当に良さげなテーマ選んでやればおkです！
終わりに 日付のデータを移行できなかったのが残念ですね。。それ以外は簡単に移行できたので、まぁ良しとします！
「ブログを書く→git commit→git push」という手順を踏むのが面倒になってきたので 次回は流行り？のCIサービス、CircleCIの無料枠を使ってデプロイの自動化を行いたいと思います。こちらもこのブログで手順や所感をメモしておこうとお思います。</description>
    </item>
    
    <item>
      <title>Hugo覚書とその所感</title>
      <link>https://alltimeneet.com/tech/2019-01-20-programming-hugo/</link>
      <pubDate>Sun, 20 Jan 2019 09:03:48 +0900</pubDate>
      
      <guid>https://alltimeneet.com/tech/2019-01-20-programming-hugo/</guid>
      <description>ざっくりHugoについて Go製の静的webジェネレータ。新しいライブラリというかフレームワーク？？なので、コミュニティもJekyllに比べて盛んな印象です。
インストール $ brew install hugo $ hugo version brew以外のインストール方法もあるようです。 参考: install Hugo
使い方 コマンド  プロジェクト作成  $ hugo new site yoursite  ローカルサーバーを立てる  $ hugo server  post  $ hugo new post/first-post.md /content以下に作成される仕様になっております。
 テーマの適用  $ git clone hoge@hoge.git themes/hoge #テーマ「hoge」をclone $ echo &amp;#39;theme = &amp;#34;hoge&amp;#34;&amp;#39; &amp;gt;&amp;gt; config.toml #config.tomlへ記述 設定などはconfig.tomlへ記述するようです。どうでもいいけど、toml形式って初めて見ました。 こちらの公式ドキュメントが参考になると思います quickstart
HugoでGithubPagesにホスティング $ hugo でpublicディレクトリが追加される。 このpublicディレクトリ以下をGithubPagesでホスティングします。プロジェクトディレクトリではありません、注意！
やっておくと良いこと  絶対パス化  $ echo &amp;#39;canonifyurls = true&amp;#39; &amp;gt;&amp;gt; config.</description>
    </item>
    
  </channel>
</rss>