<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CircleCI on All Time NEET</title>
    <link>https://blog.nosugi.tech/tags/circleci/</link>
    <description>Recent content in CircleCI on All Time NEET</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Feb 2019 22:03:25 +0900</lastBuildDate>
    
	<atom:link href="https://blog.nosugi.tech/tags/circleci/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CircleCIで毎回面倒なHugoのデプロイ作業を自動化する</title>
      <link>https://blog.nosugi.tech/tech/circleci-hugo/</link>
      <pubDate>Tue, 12 Feb 2019 22:03:25 +0900</pubDate>
      
      <guid>https://blog.nosugi.tech/tech/circleci-hugo/</guid>
      <description>CIサービスとは  ビルドとテストを自動化するためのサービス
 ということで理解しておけばいいと思います。一応直訳すると「Continuous Integration（継続的インテグレーションサービス）」、略してCIサービスということらしいです。
参考: なぜCIが必要なのか
目標  GithubPagesで公開しているHugoプロジェクトのデプロイ作業を自動化する
 Hugoの場合はプロジェクト本体ではなく、publicディレクトリ以下をgithubにホスティングする必要があるので、デプロイするときは基本的に以下のような手順を踏まなければならない。
$ git commit -m &amp;quot;hoge&amp;quot; $ hugo #public以下にサイトを生成するコマンド $ cd public $ git commit -m &amp;quot;hogehoge&amp;quot; $ git push  このルーティンが段々だるくなってくきたので、CircleCiでこれを自動化する。
手順  レポジトリとデプロイキーを登録する .circleci/config.ymlの記述  参考: CircleCIでHugoを実行してGitHub Pagesにデプロイ
ブログ(HUGO)のビルドとデプロイをCircleCIで自動化した
1. レポジトリとデプロイキーを登録する  レポジトリの登録
最初のブランチ一覧が表示される画面で登録したいレポジトリにチェックマークをつけてFollowを押せば登録できます。 デプロイキーの登録
今回はgithubへのsshキーを登録します。サイドメニューのcheck out SSH Key からadd User KeyでGithubアカウントにログインすること楽に登録ができます。手動で登録も可能ですが、pushのための書き込み権限の付与がされてなくてエラーになりました、何やかんややりましたが解決できなかったので、check out ssh keyからの登録をお勧めします。  2. .circleci/config.ymlの記述 CircleCiにやってほしいことを.circleci/config.ymlに記述します。githubのレポジトリにpushされた時発火します。 僕の場合masterブランチでhugoプロジェクト本体、gh-pagesブランチで公開用のpublic以下のファイル群を管理しています。内容はこんな感じです参考までに
version: 2 jobs: build: docker: - image: cibuilds/hugo:latest environment: TZ: Asia/Tokyo #ここら辺はコピペでいいと思う branches: ignore: - gh-pages #gh-pagesにプッシュされた際に反応しないようにignoreを設定している steps: - checkout - run: name: &amp;quot;Setting for Git&amp;quot; command: | git config --global user.</description>
    </item>
    
  </channel>
</rss>